#include <stdio.h>
#include <math.h>

double cat[] = { 2.2, 1.7, 1.5, 1.4, 1.2, 1.1 };
double ca = 2.2;
double t[] = { 0, 1.7, 2.5, 3.1, 3.8, 4.5 };
int N = 6;
double n = 0, k = 0, d = 0, r = 0;
double c1, c2, t1, t2, T, reg_up = 0, reg_down = 0;
double s[6] = { 0, 0, 0, 0, 0, 0 };
double y[6], x[6];

double math(double cat[],double ca, double t[], int N, double *n, double *k, double* d, double* r)
{
	s[0] = N - 1;
	for (int i = 0; i < N - 1; i++)
	{
		if (cat[i] > cat[i + 1]) reg_down++;
		else reg_up++;
		c1 = cat[i];
		c2 = cat[i + 1];
		t1 = t[i];
		t2 = t[i + 1];
		y[i] = log(fabs(c2 - c1) / (t2 - t1));
		x[i] = log(c1);
		s[1] += x[i];
		s[2] += y[i];
		s[3] += pow(x[i], 2);
		s[4] += x[i] * y[i];
		s[5] += pow(y[i], 2);
	}
	*k = exp((s[2] * s[3] - s[1] * s[4]) / (s[0] * s[3] - s[1] * s[1]));
	*n = (s[0] * s[4] - s[1] * s[2]) / (s[0] * s[3] - s[1] * s[1]);
	*r = (s[0] * s[4] - s[1] * s[2]) / sqrt((s[0] * s[3] - s[1] * s[1]) * (s[0] * s[5] - s[2] * s[2]));
	for (int i = 1; i < N; i++)
	{
		c1 = cat[i-1];
		t2 = t[i];
		t1 = t[i-1];
		T = t2 - t1;
		if (i != 1)
		{
			if (reg_down > reg_up) ca = ca - *k * pow(ca, *n)*T;
			else ca = ca + *k * pow(ca, *n)*T;
		}
		*d += pow(c1 - ca, 2);
	}
	return ;
}